"""
通常情况下，当使用 import 语句导入模块后，Python 会按照以下顺序查找指定的模块文件：
    1.在当前目录，即当前执行的程序文件所在目录下查找；
    2.到 PYTHONPATH（环境变量）下的每个目录中查找；
    3.到 Python 默认的安装目录下查找。

以上所有涉及到的目录，都保存在标准模块 sys 的 sys.path 变量中，通过此变量我们可以看到指定程序文件支持查找的所有目录。
    换句话说，如果要导入的模块没有存储在 sys.path 显示的目录中，那么导入该模块并运行程序时，
    Python 解释器就会抛出 ModuleNotFoundError（未找到模块）异常。

解决“Python找不到指定模块”的方法有 3 种，分别是：
    1.向 sys.path 中临时添加模块文件存储位置的完整路径；
    2.将模块放在 sys.path 变量中已包含的模块加载路径中；
    3.设置 path 系统环境变量。

导入模块：
    1.子级：from  包名 import 模块名 as 别名,模块名 as 别名
    2.同级：import 模块名 as 别名,模块名 as 别名
    3.添加当前路径的上一级目录：使用sys.path.append("..")
    4.直接Alt+Enter选择模块导入就好

导入模块的所有成员：from 模块 import *
导入模块的某个成员：from 模块 import 成员

_变量名 ：可以把这个变量变为私有，防⽌其他⽂件导⼊使⽤，但不使⽤ from ... import * 上述的私有将不起作⽤
"""


# 局部导入

def f1():
    import time
    time.sleep(1)
    print("------f1------")


f1()
